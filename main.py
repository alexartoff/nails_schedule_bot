import telebot
import botConfig
from datetime import timedelta, datetime
import time
from emoji import emojize
from random import choice
import locale
import calendar

locale.setlocale(locale.LC_ALL, "")

# telebot.apihelper.proxy = {'PROXY'}
bot = telebot.TeleBot(botConfig.TOKEN)
targetID = 1030381477 #1030381477-Katy   1100544423-Polly
targetIDtest = 683022141
adminID = 683022141

keyboard1 = telebot.types.ReplyKeyboardMarkup(True, True)
keyboard1.row('/–ù–∞—á–∞—Ç—å', '/–ü–æ–º–æ—â—å')

keyboard2 = telebot.types.InlineKeyboardMarkup()
keyboard2.add(telebot.types.InlineKeyboardButton(text='–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è', callback_data = "useIt"))
keyboard2.add(telebot.types.InlineKeyboardButton(text='–ü–æ–º–æ—â—å', callback_data = "help"))

backButton = telebot.types.InlineKeyboardMarkup()
backButton.add(telebot.types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data = "back"))

STICKERS = ['CAACAgIAAxkBAAEBuxlf7H3QOn-nJnpRjlNcElhfl8iTswACsgEAAjDUnRHOwb3OvDHg8h4E', 'CAACAgIAAxkBAAEBuxtf7H3jjemyO3PDOjKL4zp7gU8SWQACsAEAAjDUnRGkbRgnBeEJix4E', 'CAACAgIAAxkBAAEBux1f7H3vm88rAAFta5scfWN6i0RVsXIAArUBAAIw1J0RU4pzFgFgbjEeBA']
HNY = ['üéÅ', 'üéä', 'üéâ', 'üéÑ', '‚òÉ', '‚ùÑ', 'üéÖ']
SMILE = ['üòâ', 'üòò', 'üòç', 'üòú', 'üòè', 'üçï', 'üç∞', 'üç∑', 'üíÖ', 'üíÉ', 'üß©', 'üì∫', 'üìö', 'üõÄ', 'üõå', 'üë©‚Äç‚ù§Ô∏è‚Äçüë®', 'üçæ', 'üëá', '‚ùó']
#         0     1      2     3     4     5      6     7     8     9      10    11    12    13     14    15    16    17    18



# bot  bot  bot  bot  bot  bot  bot  bot  bot  bot  bot  bot  bot  bot  bot  bot
# bot  bot  bot  bot  bot  bot  bot  bot  bot  bot  bot  bot  bot  bot  bot  bot


@bot.message_handler(commands=['start'])
def start_command(message):
    smile = emojize(choice(HNY))
    stick = choice(STICKERS)

    newYear = datetime(2021, 1, 1, 0, 0, 1)
    period = newYear - datetime.now()
    # print("{} —Å–µ–∫—É–Ω–¥ / {} period".format(period.total_seconds(), period))

    bot.send_sticker(message.chat.id, '{sticker}'.format(sticker = stick))
    time.sleep(0.5)
    if period.total_seconds() > 0:
        bot.send_message(
            message.chat.id, #https://trial-sport.ru/goods/1493666.html
            '–ü—Ä–∏–≤–µ—Ç, {user}! {smile}\n–£–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —á—Ç–æ —Ç–µ–±—è —Ç—É—Ç –∂–¥—ë—Ç? {wink}\n\n–£–∑–Ω–∞–µ—à—å 1 —è–Ω–≤–∞—Ä—è 2021 –≥–æ–¥–∞, –∞ –ø–æ–∫–∞ —Ä–∞–Ω–æ...'.format(user = message.from_user.username, smile = smile, wink = SMILE[0]))
    else:
        bot.send_message(
            message.chat.id, #https://trial-sport.ru/goods/1493666.html
            '–ü—Ä–∏–≤–µ—Ç, {user}! {smile}\n–£–∂–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —á—Ç–æ —Ç–µ–±—è —Ç—É—Ç –∂–¥—ë—Ç? {wink}\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å¬ª'.format(user = message.from_user.username, smile = smile, wink = SMILE[0]),
            reply_markup = keyboard1)

    print(datetime.now(), '// bot started by user', message.from_user.username,'( user.id', message.from_user.id,') user.is.bot', message.from_user.is_bot)



@bot.message_handler(commands=['–ù–∞—á–∞—Ç—å'])
def starting_command(message):
    # fileName = message.from_user.id
    # userFile = open("{fName}.txt".format(fName = fileName), "a")
    if message.from_user.id == targetID or message.from_user.id == targetIDtest:
        text = ('–î–æ—Ä–æ–≥–∞—è –ö–∞—Ç—é—à–µ–Ω—å–∫–∞! {kiss}\n'
        '–° –ù–æ–≤—ã–º 2021 –≥–æ–¥–æ–º —Ç–µ–±—è! {hny}\n'
        '–ê —ç—Ç–æ —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ {gift}\n\n {voskl}–¢–≤–æ–∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ{voskl}\n\n'
        '–ö–∞–∫ —Ç—ã –∏—Ö –ø—Ä–æ–≤–µ–¥–µ—à—å, —Ä–µ—à–∞—Ç—å —Ç–µ–±–µ\n–•–æ—á–µ—à—å —Ç–∞–∫ {party}  –°—É–ø–µ—Ä!\n'
        '–¢–∞–∫ {relax}  Ok!\n–Ø —Å–æ —Å–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä–∏–ª–æ–∂—É –º–∞–∫—Å–∏–º—É–º —É—Å–∏–ª–∏–π, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∏—Ö –∏–¥–µ–∞–ª—å–Ω—ã–º–∏\n\n'
        '–ü–æ–¥–∞—Ä–æ–∫, –∫—Å—Ç–∞—Ç–∏, –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –≤–µ—á–µ—Ä–∞ –ü–Ø–¢–ù–ò–¶–´ –ø–æ –≤–µ—á–µ—Ä –í–û–°–ö–†–ï–°–ï–ù–¨–Ø.\n–ê –µ—â—ë –∫ –ø–æ–¥–∞—Ä–∫—É –ø—Ä–∏–ª–∞–≥–∞–µ—Ç—Å—è:\n'
        '{wine} –±—É—Ç—ã–ª–æ—á–∫–∞ —Ö–æ—Ä–æ—à–µ–≥–æ –≤–∏–Ω–∞ (—Ç—ã –µ–≥–æ —É–∂–µ —É–≤–∏–¥–µ–ª–∞ {wink1})\n*{sushi} –∑–∞–∫–∞–∑ –ø–∏—Ü—Ü—ã –∏/–∏–ª–∏ —Å—É—à–∏\n*{youme} —Å–≤–∏–¥–∞–Ω–∏–µ —Å–æ –º–Ω–æ–π\n\n'
        '–ü—Ä–æ –¥–µ—Ç–µ–π –Ω–µ –≤–æ–ª–Ω—É–π—Å—è, –º—ã –≤—Å–µ –±—É–¥–µ–º –≤–º–µ—Å—Ç–µ –ø–æ–¥ –ø—Ä–∏—Å–º–æ—Ç—Ä–æ–º –±–∞–±—É—à–∫–∏\n\n'
        '–õ—é–±–ª—é —Ç–µ–±—è –æ—á–µ–Ω—å! {love}\n'
        '–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç—ã –æ–ø—Ä–µ–¥–µ–ª–∏—à—å—Å—è —Å –¥–∞—Ç–æ–π, —Å–æ–æ–±—â–∏ —ç—Ç–æ–º—É –±–æ—Ç—É, –Ω—É –∏–ª–∏ —Å—Ä–∞–∑—É –º–Ω–µ —à–µ–ø–Ω–∏ –Ω–∞ —É—à–∫–æ {kiss}\n* - –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ —Ç–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é\n\n'
        '–ù–µ –ø–æ–Ω—è—Ç–Ω–æ? –ñ–º–∏ ¬´–ü–æ–º–æ—â—å¬ª.'.format(hny = HNY[2] + HNY[3], gift = HNY[0] + SMILE[17], party = SMILE[7] + SMILE[8] + SMILE[9] + SMILE[3], relax = SMILE[7] + SMILE[13] + SMILE[11] + SMILE[12] + SMILE[10] + SMILE[14] + SMILE[14] + SMILE[14], wine = SMILE[16], sushi = SMILE[5], youme = SMILE[15] + SMILE[4] + SMILE[2], wink1 = SMILE[0], kiss = SMILE[1], love = SMILE[1] + SMILE[2] + SMILE[2], voskl = SMILE[18]))
        bot.send_message(
            message.chat.id,
            text,
            reply_markup = keyboard2)
    else:
        text = ('–ê —Ç—ã –∫—Ç–æ –≤–æ–æ–±—â–µ –∏ —á—Ç–æ —Ç—É—Ç –¥–µ–ª–∞–µ—à—å?!\n'
        '–≠—Ç–æ –≤—Å—ë –Ω–µ –¥–ª—è —Ç–µ–±—è... —Å–æ—Ä—è–Ω')
        bot.send_message(
            message.chat.id,
            text)



@bot.message_handler(commands=['–ü–æ–º–æ—â—å'])
def help_command(message):
    if message.from_user.id == targetID or message.from_user.id == targetIDtest:
        text = '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–≤–æ–∏–º –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–º –ø–æ–¥–∞—Ä–∫–æ–º, –¥–∞–≤–∞–π –±—ã—Å—Ç—Ä–µ–π –Ω–∞–∂–∏–º–∞–π ¬´–ù–∞—á–∞—Ç—å¬ª'
    else:
        text = '–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    bot.send_message(
        message.chat.id,
        text,
        reply_markup = keyboard1)



# @bot.message_handler(content_types=['text'])
# def send_text(message):
#     selectedText = message.text
#     # fileName = message.from_user.id
#
#     if selectedText == '–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!':
#         msg = bot.send_message(message.chat.id, '–ö–∞—Ç—é—à, –Ω–∞–ø–∏—à–∏, –∫–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å —ç—Ç–∏–º –∑–∞–Ω—è—Ç—å—Å—è {smile}'.format(smile = SMILE[4]), reply_markup = backButton)
#         bot.register_next_step_handler(msg, dateInput)
#     # elif selectedText == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
#     #     bot.delete_message(message.chat.id, message.message_id)
#     #     bot.send_message(message.chat.id, '–ù—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å –±—É–¥–µ–º?', reply_markup = keyboard2)
#     else:
#         bot.send_message(message.chat.id, '–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç—É', reply_markup = keyboard1)



@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    fridayTuple = searchFriday()
    monthButtons1 = telebot.types.InlineKeyboardMarkup()
    if len(fridayTuple[0]) > 0:
        for i in range(len(fridayTuple[0])):
            monthButtons1.add(telebot.types.InlineKeyboardButton(text = str(fridayTuple[0][i]) + ' ' + fridayTuple[1], callback_data = "firstMonth" + str(i)))
            # time.sleep(0.5)
        monthButtons1.add(telebot.types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü', callback_data = "nextMonth"))
        monthButtons1.add(telebot.types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data = "backFromMonth"))
    else:
        monthButtons1.add(telebot.types.InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü', callback_data = "nextMonth"))
        monthButtons1.add(telebot.types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data = "backFromMonth"))
    monthButtons2 = telebot.types.InlineKeyboardMarkup()
    for i in range(len(fridayTuple[2])):
        monthButtons2.add(telebot.types.InlineKeyboardButton(text = str(fridayTuple[2][i]) + ' ' + fridayTuple[3], callback_data = "secondMonth" + str(i)))
        # time.sleep(0.5)
    monthButtons2.add(telebot.types.InlineKeyboardButton(text='–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü', callback_data = "prevMonth"))
    monthButtons2.add(telebot.types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data = "backFromMonth"))

    if call.data == 'back':
        # bot.delete_message(call.message.chat.id, call.message.message_id)
        # call.message.text = ''
        bot.send_message(
            call.message.chat.id,
            '–ù—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å –±—É–¥–µ–º?',
            reply_markup = keyboard2)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    elif call.data == 'backFromMonth':
        bot.send_message(
            call.message.chat.id,
            '–ü—Ä–æ–¥–æ–ª–∂–∏–º?',
            reply_markup = keyboard2)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    elif call.data == 'help':
        # bot.delete_message(call.message.chat.id, call.message.message_id)
        # call.message.text = ''
        bot.send_message(
            call.message.chat.id,
            '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–≤–æ–∏–º –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–º –ø–æ–¥–∞—Ä–∫–æ–º',
            reply_markup = keyboard2)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    elif call.data == 'useIt':
        bot.send_message(
            call.message.chat.id,
            '–ö–∞—Ç—é—à, –≤—ã–±–µ—Ä–∏, –∫–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å —ç—Ç–∏–º –∑–∞–Ω—è—Ç—å—Å—è {smile}'.format(smile = SMILE[4]),
            reply_markup = monthButtons1)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    elif call.data == 'nextMonth':
        bot.send_message(
            call.message.chat.id,
            '–ê —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –ø—è—Ç–Ω–∏—Ü —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞:',
            reply_markup = monthButtons2)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    elif call.data == 'prevMonth':
        if len(fridayTuple[0]) > 0:
            bot.send_message(
                call.message.chat.id,
                '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—è—Ç–Ω–∏—Ü —ç—Ç–æ–≥–æ –º–µ—Å—è—Ü–∞:',
                reply_markup = monthButtons1)
        else:
            bot.send_message(
                call.message.chat.id,
                '–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –ø—è—Ç–Ω–∏—Ü –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –≤—ã–±–∏—Ä–∞–π —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü',
                reply_markup = monthButtons1)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)

    # elif call.data == 'firstMonth0':
    #     bot.clear_step_handler_by_chat_id(chat_id = call.message.chat.id)
    #     msg = bot.send_message(call.message.chat.id, str(fridayTuple[0][0]) + ' ' + fridayTuple[1])
    #     time.sleep(1)
    #     bot.send_message(683022141, '–≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: ' + msg.text)
    #     time.sleep(0.5)
    #     bot.send_message(call.message.chat.id, '–ù—É –≤—Å—ë, –≥–æ—Ç–æ–≤–æ!\n–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è ;)')
    #     bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)

    for i in range(len(fridayTuple[0])):
        text = "firstMonth" + str(i)
        # print('text', text)
        if call.data == text:
            # bot.clear_step_handler_by_chat_id(chat_id = call.message.chat.id)
            msg = bot.send_message(call.message.chat.id, str(fridayTuple[0][i]) + ' ' + fridayTuple[1])
            time.sleep(0.5)
            bot.send_message(adminID, '–≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: ' + msg.text)
            time.sleep(0.5)
            bot.send_message(call.message.chat.id, '–ù—É –≤—Å—ë, –≥–æ—Ç–æ–≤–æ!\n–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è ;)')
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)

    for i in range(len(fridayTuple[2])):
        text = "secondMonth" + str(i)
        # print('text', text)
        if call.data == "secondMonth" + str(i):
            # bot.clear_step_handler_by_chat_id(chat_id = call.message.chat.id)
            msg = bot.send_message(call.message.chat.id, str(fridayTuple[2][i]) + ' ' + fridayTuple[3])
            time.sleep(0.5)
            bot.send_message(adminID, '–≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: ' + msg.text)
            time.sleep(0.5)
            bot.send_message(call.message.chat.id, '–ù—É –≤—Å—ë, –≥–æ—Ç–æ–≤–æ!\n–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è ;)')
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)







# FUNCTIONS  FUNCTIONS  FUNCTIONS  FUNCTIONS  FUNCTIONS  FUNCTIONS  FUNCTIONS
# FUNCTIONS  FUNCTIONS  FUNCTIONS  FUNCTIONS  FUNCTIONS  FUNCTIONS  FUNCTIONS

# def dateInputFunc(message):
#     dateInput = message.text
#     print('dateInput', dateInput)
#     if len(dateInput) < 15:
#         bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ!\n–°–µ–π—á–∞—Å –∫–æ–µ-–∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—é...' + dateInput)
#         time.sleep(1)
#         now = datetime.now()
#         bot.send_message(683022141, '@ alex:' + now.strftime("%d %B %Y (%A)"))
#         time.sleep(1)
#         bot.send_message(message.chat.id, '–ù—É –≤—Å—ë, –≥–æ—Ç–æ–≤–æ!')
#         print('–ù—É –≤—Å—ë, –≥–æ—Ç–æ–≤–æ!')
#     else:
#         bot.delete_message(message.chat.id, message.message_id)
#         bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...', reply_markup = keyboard2)
# end dateInput



def searchFriday():
    now = datetime.now()
    yearFirstInt = int(now.strftime("%Y"))
    monthFirst = now.strftime("%m")
    monthFirstStr = now.strftime("%B")
    # fridayMonthFirst = []
    # fridayMonthSecond = []

    if monthFirst.isdigit():
        if monthFirst.find('0') == 0:
            monthFirst.replace("0", "")
        monthFirstInt = int(monthFirst)
    if monthFirstInt == 12:
        monthSecondInt = 1
        yearSecondInt = yearFirstInt + 1
    else:
        monthSecondInt = monthFirstInt + 1
        yearSecondInt = yearFirstInt
    monthSecondStr = (datetime(yearSecondInt, monthSecondInt, 1)).strftime("%B")

    fridayMonthFirst = calcDays(yearFirstInt, monthFirstInt)
    fridayMonthSecond = calcDays(yearSecondInt, monthSecondInt)

    # print(fridayMonthFirst, fridayMonthSecond)
    return fridayMonthFirst, monthFirstStr, fridayMonthSecond, monthSecondStr
# end searchFriday



def calcDays(year, month):
    searchDay = 0
    days = []
    dayCount = calendar.monthrange(year, month)[1]

    for i in range(1, 7):
        currentDate = datetime(year, month, i)
        # print(currentDate)
        if (currentDate.strftime("%A")).lower() == '–ø—è—Ç–Ω–∏—Ü–∞':
            searchDay = i
            break

    for d in range(searchDay, dayCount, 7):
        period = datetime(year, month, d, 19, 00, 00) - datetime.now()
        if ((datetime(year, month, d)).strftime("%A")).lower() == '–ø—è—Ç–Ω–∏—Ü–∞':
            if period.total_seconds() > 0:
                days.append(d)
    return days
# end calcDays



while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(datetime.now(), 'ERROR!!! -', e)
        # –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥ –≤ —Å–ª—É—á–∞–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ Telegram
        time.sleep(15)
